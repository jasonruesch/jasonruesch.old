name: Main Branch CI

env:
  NX_CLOUD_ACCESS_TOKEN: ${{ secrets.NX_CLOUD_ACCESS_TOKEN }}
  CODECOV_TOKEN: ${{ secrets.CODECOV_TOKEN }}

# this workflow runs only on the main branch
on:
  push:
    branches:
      - 'main'

# concurrency:
#   group: ${{ github.workflow }}-${{ github.ref || github.run_id }}
#   cancel-in-progress: true

jobs:
  main:
    name: Nx Cloud - Main Job
    if: contains(github.event.head_commit.message, '(release)') != true
    uses: nrwl/ci/.github/workflows/nx-cloud-main.yml@v0.13.0
    with:
      number-of-agents: 3
      init-commands: |
        npx nx-cloud start-ci-run --stop-agents-after="build" --agent-count=3
      # `npx nx format:check` checks prettier formatting
      # `npx commitlint` validates all commits from PR for compliance with conventional commit format
      parallel-commands: |
        npx nx-cloud record -- npx nx format:check
        npx nx-cloud record -- npx commitlint --from ${{ github.sha }} --to ${{ github.sha }} --verbose
      parallel-commands-on-agents: |
        npx nx run-many --target=lint --all --parallel=3
      # npx nx run-many --target=test --all --parallel=3 --ci --coverage --skip-nx-cache
      # npx nx run-many --target=build --all --parallel=3
      # npx nx run-many --target=e2e --all --parallel=1 --ci
      # artifacts-path: |
      #   dist/
      #   coverage/
      # artifacts-name: dist-and-coverage-artifacts
    secrets:
      NX_CLOUD_AUTH_TOKEN: ${{ secrets.NX_CLOUD_ACCESS_TOKEN }}
      NX_CLOUD_ACCESS_TOKEN: ${{ secrets.NX_CLOUD_ACCESS_TOKEN }}

  agents:
    name: Nx Cloud - Agents
    if: contains(github.event.head_commit.message, '(release)') != true
    uses: nrwl/ci/.github/workflows/nx-cloud-agents.yml@v0.13.0
    with:
      number-of-agents: 3
    secrets:
      NX_CLOUD_AUTH_TOKEN: ${{ secrets.NX_CLOUD_ACCESS_TOKEN }}
      NX_CLOUD_ACCESS_TOKEN: ${{ secrets.NX_CLOUD_ACCESS_TOKEN }}

  # codecoverage:
  #   runs-on: ubuntu-latest
  #   name: Code Coverage
  #   needs: ['main']
  #   steps:
  #     - uses: xSAVIKx/artifact-exists-action@v0
  #       id: check-artifact-exists
  #       with:
  #         name: dist-and-coverage-artifacts
  #     - uses: actions/checkout@v3
  #       if: steps.check-artifact-exists.outputs.exists == 'true'
  #     - uses: actions/download-artifact@v3
  #       if: steps.check-artifact-exists.outputs.exists == 'true'
  #       with:
  #         name: dist-and-coverage-artifacts
  #         path: coverage/
  #     - name: Display structure of downloaded files
  #       if: steps.check-artifact-exists.outputs.exists == 'true'
  #       run: ls -R
  #     - uses: codecov/codecov-action@v3
  #       if: steps.check-artifact-exists.outputs.exists == 'true'
  #       with:
  #         directory: ./coverage
  #         flags: unittests # optional
  #         name: codecov-umbrella # optional
  #         fail_ci_if_error: false # optional (default = false)
  #         verbose: false # optional (default = false)

  release:
    name: Release
    if: contains(github.event.head_commit.message, '(release)') != true
    # needs: ['codecoverage']
    needs: ['main']
    runs-on: ubuntu-latest
    steps:
      - name: Checkout
        uses: actions/checkout@v3
        with:
          fetch-depth: 0
          persist-credentials: false
      - name: Setup Node.js
        uses: actions/setup-node@v3
        with:
          node-version: 'lts/*'
      - name: Install dependencies
        run: npm install
      - name: Release
        env:
          GITHUB_TOKEN: ${{ secrets.PAT }}
        run: HUSKY=0 npx nx run-many --target=semantic-release --all
