name: Main Branch CI

# https://thefullstack.engineer/full-stack-development-series-part-6-application-deployment-and-ci-cd/#cicd-with-github-actions

on:
  push:
    branches:
      - main

# Needed for nx-set-shas within nx-cloud-main.yml, when run on the main branch
permissions:
  actions: read
  contents: read

jobs:
  main:
    name: Nx Cloud - Main Job
    if: contains(github.event.head_commit.message, '(release)') != true
    uses: nrwl/ci/.github/workflows/nx-cloud-main.yml@v0.13.1
    with:
      main-branch-name: main
      number-of-agents: 3
      init-commands: |
        npx nx-cloud start-ci-run --stop-agents-after="build" --agent-count=3
      # `npx nx format:check` checks prettier formatting
      # `npx commitlint` validates all commits from PR for compliance with conventional commit format
      # `npm audit signatures` verifies the integrity of provenance attestations
      # and registry signatures for installed dependencies
      parallel-commands: |
        npx nx-cloud record -- npx nx format:check
        npx nx-cloud record -- npx commitlint --from ${{ github.sha }} --to ${{ github.sha }} --verbose
        npx nx-cloud record -- npm audit signatures
      parallel-commands-on-agents: |
        npx nx affected --target=lint --parallel=3 --base=origin/main --head=HEAD
        npx nx affected --target=e2e --parallel=1 --configuration=ci --base=origin/main --head=HEAD
        npx nx affected --target=test --parallel=3 --configuration=ci --code-coverage --base=origin/main --head=HEAD
        npx nx affected --target=build --parallel=3 --base=origin/main --head=HEAD
      artifacts-path: |
        dist/
        coverage
      artifacts-name: dist-and-coverage-artifacts

  agents:
    name: Nx Cloud - Agents
    if: contains(github.event.head_commit.message, '(release)') != true
    uses: nrwl/ci/.github/workflows/nx-cloud-agents.yml@v0.13.1
    with:
      number-of-agents: 3

  # codecoverage:
  #   runs-on: ubuntu-latest
  #   name: Code Coverage
  #   needs:
  #     - main
  #   steps:
  #     - uses: actions/checkout@v3
  #     - uses: actions/download-artifact@v3
  #       with:
  #         name: dist-and-coverage-artifacts
  #         path: coverage
  #     - name: Display structure of downloaded files
  #       run: ls -R
  #     - uses: codecov/codecov-action@v3
  #       with:
  #         directory: ./coverage/coverage
  #         flags: unittests # optional
  #         name: codecov-umbrella # optional
  #         fail_ci_if_error: false # optional (default = false)
  #         verbose: false # optional (default = false)
  #       env:
  #         CODECOV_TOKEN: ${{ secrets.CODECOV_TOKEN }}

  release:
    name: Release Job
    if: contains(github.event.head_commit.message, '(release)') != true
    needs: main
    runs-on: ubuntu-latest
    permissions:
      contents: write # to be able to publish a GitHub release
      issues: write # to be able to comment on released issues
      pull-requests: write # to be able to comment on released pull requests
      id-token: write # to enable use of OIDC for npm provenance
    steps:
      - name: Checkout
        uses: actions/checkout@v3
        with:
          fetch-depth: 0
          persist-credentials: false

      - name: Setup node
        uses: actions/setup-node@v3
        with:
          node-version: 'lts/*'
          cache: npm

      - name: Install dependencies
        run: npm ci

      # https://github.com/semantic-release/semantic-release/blob/master/docs/recipes/ci-configurations/github-actions.md
      - name: Release
        env:
          GITHUB_TOKEN: ${{ secrets.PAT }}
        run: HUSKY=0 npx semantic-release --extends ./release.config.js

  docker-build:
    name: Docker Build
    needs: release
    runs-on: ubuntu-latest
    env:
      INPUT_PUSH: true
    steps:
      - name: Checkout
        uses: actions/checkout@v3
        with:
          fetch-depth: 0
      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v2
      - name: Login to GitHub Container Registry
        uses: docker/login-action@v2
        with:
          registry: ghcr.io
          username: ${{ github.actor }}
          password: ${{ secrets.GITHUB_TOKEN }}
      - name: Derive appropriate SHAs for base and head for `nx affected` commands
        uses: nrwl/nx-set-shas@v3
      - uses: actions/setup-node@v3
        with:
          cache: 'npm'
          node-version: 'lts/*'
      - name: 'Downloading artifacts'
        continue-on-error: true
        uses: actions/download-artifact@v3
        with:
          name: dist-and-coverage-artifacts
          path: dist
      - run: npm install
      - run: npx nx affected --base=$NX_BASE --head=$NX_HEAD --target=container --parallel=2
        env:
          INPUT_GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
          INPUT_APP_IMAGES: ghcr.io/jasonruesch/portfolio
